(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{331:function(n,r,e){"use strict";e.r(r);var o=e(5),a=Object(o.a)({},(function(){var n=this,r=n._self._c;return r("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[r("h3",{attrs:{id:"_1-创建自定义的全局指令"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-创建自定义的全局指令"}},[n._v("#")]),n._v(" 1.创建自定义的全局指令")]),n._v(" "),r("ul",[r("li",[n._v("新建一个'bin'文件夹")]),n._v(" "),r("li",[n._v("在 bin文件夹中新建一个cli.js文件")]),n._v(" "),r("li",[n._v("在项目根目录打开命令行，输入：'npm init' or 'npm init -y'（package.json会自动引入bin目录下的文件）")]),n._v(" "),r("li",[n._v("在项目根目录打开命令行，输入：'npm link' 把 package.json中bin 配置命令挂载到全局。")]),n._v(" "),r("li",[n._v("在cli.js写入 '#! /usr/bin/env node'")]),n._v(" "),r("li",[r("ul",[r("li",[n._v("#! 告诉系统这个是一段运行脚本")])])]),n._v(" "),r("li",[r("ul",[r("li",[n._v("/usr/bin/env 需要的环境路径")])])]),n._v(" "),r("li",[r("ul",[r("li",[n._v("node 需要的环境")])])])]),n._v(" "),r("h3",{attrs:{id:"_2-设置commander指令"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-设置commander指令"}},[n._v("#")]),n._v(" 2.设置commander指令")]),n._v(" "),r("blockquote",[r("p",[n._v("插件地址： https://github.com/tj/commander.js/blob/HEAD/Readme_zh-CN.md")])]),n._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[n._v("#! /usr/bin/env node\n\nconst { program } = require('commander');\n\n//  设置命令  \n// <name> 必填\nprogram.option('-f --frawork <frawork>','设置模板');\n\n//  创建项目\nprogram\n.command('create <project> [other...]') // 声明创建项目 命令\n.alias('crt') //  创建项目 命令别名\n.description('创建项目')// 项目描述 命令\n.action( (project,args) => {\n    // 命令行执行逻辑代码\n    console.log('project: ', project);\n    console.log('args: ', args);\n})\n\n// process.argv 命令行的所有选项\nprogram.parse(process.argv);\n\n")])])]),r("h3",{attrs:{id:"_3-inquirer-命令交互"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3-inquirer-命令交互"}},[n._v("#")]),n._v(" 3.inquirer 命令交互")]),n._v(" "),r("blockquote",[r("p",[n._v("插件地址： https://www.npmjs.com/package/inquirer")])]),n._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[n._v("const inquirer = require ('inquirer');\n\n// 命令行执行逻辑代码\nconst commandAction = async (project, args) => {\n\n    //  prompt 是一个promise对象\n    const answers = await inquirer.prompt([//  questions: 包含问题的数组\n        {   \n            //  用户输入的类型是什么，默认input。\n            //  可选：input, number, confirm, list, rawlist, expand, checkbox, password, editor\n            type: 'list', \n            // 将答案存储的key标记\n            name: 'framwork',\n            //  String|Function： 用户需要回答的问题\n            message: '请选择你所使用的框架'\n        }\n    ])\n}\n\nmodule.exports = commandAction;\n")])])]),r("p",[r("strong",[n._v("⚠️注意：inquirer9.x版本使用的ES module 的语法，node是基于common语法的框架。所以我们应该使用8.x的版本")])]),n._v(" "),r("h3",{attrs:{id:"_4-download-git-repo-下载远程仓库模板代码"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_4-download-git-repo-下载远程仓库模板代码"}},[n._v("#")]),n._v(" 4.download-git-repo 下载远程仓库模板代码")]),n._v(" "),r("blockquote",[r("p",[n._v("插件地址： https://www.npmjs.com/package/download-git-repo")])]),n._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[n._v("const download = require('download-git-repo');\n\nconst downloadGitRepoFn = (url,project) => {download(`direct:${url}`, project, { clone: true }, (error) => {\n  console.log('error: ', error);\n    }\n    );\n}\nmodule.exports = downloadGitRepoFn\n")])])]),r("h3",{attrs:{id:"_5-ora-等待提示和chalk-命令行文字样式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_5-ora-等待提示和chalk-命令行文字样式"}},[n._v("#")]),n._v(" 5.ora 等待提示和chalk 命令行文字样式")]),n._v(" "),r("blockquote",[r("p",[n._v("ora 等待提示插件地址： https://www.npmjs.com/package/ora\nchalk  等待提示插件地址： https://www.npmjs.com/package/chalk")])]),n._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[n._v("const download = require('download-git-repo');\nconst ora = require('ora');\nconst chalk = require('chalk');\n\nconst downloadGitRepoFn = (url,project) => {\n    const spinner = ora('Loading unicorns').start();\n    spinner.color = 'yellow';\n    spinner.text = '正在下载中...';\n    download(`direct:${url}`, project, { clone: true }, (error) => {\n            if(!error){\n                spinner.succeed('成功');\n                console.log(chalk.yellow('使用 npm i 来初始化项目'));\n                console.log(chalk.yellow('使用 npm run dev 运行项目'));\n            }else {\n                spinner.fail('失败');\n            }\n    }\n    );\n}\n\nmodule.exports = downloadGitRepoFn\n")])])]),r("p",[r("strong",[n._v("⚠️注意：ora和chal都有与inquirer一样的问题，注意使用的版本")])]),n._v(" "),r("h3",{attrs:{id:"_6-目录结构"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_6-目录结构"}},[n._v("#")]),n._v(" 6.目录结构")]),n._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[n._v("- bin\n  |-- cli.js\n- lib\n  |-- core\n    |--- action.js\n    |--- conmmand.js\n    |--- dowload.js\n    |--- frawork.js\n- config.js\n- package.json\n")])])]),r("p",[r("a",{attrs:{href:"https://github.com/feligo887/my-cli/tree/main",target:"_blank",rel:"noopener noreferrer"}},[n._v("项目地址"),r("OutboundLink")],1)])])}),[],!1,null,null,null);r.default=a.exports}}]);