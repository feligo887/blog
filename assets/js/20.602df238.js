(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{330:function(t,a,e){"use strict";e.r(a);var s=e(5),r=Object(s.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h3",{attrs:{id:"什么是跨域"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是跨域"}},[t._v("#")]),t._v(" 什么是跨域")]),t._v(" "),a("ul",[a("li",[t._v("跨域，是指浏览器不能执行其他网站的脚本。它是由浏览器的同源策略造成的，是浏览器对JavaScript实施的安全限制。浏览器从一个域名的网页去请求另一个域名的资源时，出现域名、端口、协议任一不同，都属于跨域。")])]),t._v(" "),a("h3",{attrs:{id:"跨域解决方案"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#跨域解决方案"}},[t._v("#")]),t._v(" 跨域解决方案")]),t._v(" "),a("ol",[a("li",[t._v("通过jsonp跨域")]),t._v(" "),a("li",[t._v("document.domain + iframe跨域")]),t._v(" "),a("li",[t._v("location.hash + iframe")]),t._v(" "),a("li",[t._v("window.name + iframe跨域")]),t._v(" "),a("li",[t._v("postMessage跨域")]),t._v(" "),a("li",[t._v("跨域资源共享（CORS）")]),t._v(" "),a("li",[t._v("nginx代理跨域")]),t._v(" "),a("li",[t._v("nodejs中间件代理跨域")]),t._v(" "),a("li",[t._v("WebSocket协议跨域")])]),t._v(" "),a("h3",{attrs:{id:"jsonp跨域"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#jsonp跨域"}},[t._v("#")]),t._v(" JSONP跨域")]),t._v(" "),a("p",[a("strong",[t._v("jsonp的原理就是利用 script 标签没有跨域限制，通过 script 标签src属性，发送带有callback参数的GET请求，服务端将接口返回数据拼凑到callback函数中，返回给浏览器，浏览器解析执行，从而前端拿到callback函数返回的数据")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("<script>\n  var script = document.createElement('script');\n  script.type = 'text/javascript';\n\n  // 传参一个回调函数名给后端，方便后端返回时执行这个在前端定义的回调函数\n  script.src = 'http://www.test.com:8080/login?user=admin';\n  document.head.appendChild(script);\n<\/script>\n")])])]),a("h3",{attrs:{id:"cors跨域"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cors跨域"}},[t._v("#")]),t._v(" CORS跨域")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("简单请求")])])]),t._v(" "),a("ol",[a("li",[t._v("使用下列方法之一：GET、POST、HEAD。")]),t._v(" "),a("li",[t._v("不得人为设置该集合之外的其他首部字段：Accept、Accept-Language、Content-Language、Content-Type")]),t._v(" "),a("li",[t._v("Content-Type 的值仅限于下列三者之一：text/plain、multipart/form-data、application/x-www-form-urlencode")]),t._v(" "),a("li",[t._v("请求中的任意XMLHttpRequestUpload 对象均没有注册任何事件监听器；XMLHttpRequestUpload 对象可以使用 XMLHttpRequest.upload 属性访问")]),t._v(" "),a("li",[t._v("请求中没有使用 ReadableStream 对象")])]),t._v(" "),a("h4",{attrs:{id:"cors跨域简单请求处理方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cors跨域简单请求处理方法"}},[t._v("#")]),t._v(" CORS跨域简单请求处理方法")]),t._v(" "),a("ul",[a("li",[t._v("普通跨域请求：只服务端设置Access-Control-Allow-Origin即可，前端无须设置，若要带cookie请求：前后端都需要设置。")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("//  nodejs\nconst app = http.createServer((req,res) => {\n  res.writeHead(200,{'Access-Control-Allow-Origin': '*'})\n})\n")])])]),a("ul",[a("li",[a("strong",[t._v("非简单请求")])])])])}),[],!1,null,null,null);a.default=r.exports}}]);